apply plugin: 'java'

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'eu.mihosoft.vnativegl.Main'
}


repositories {
    mavenCentral()
    jcenter()
}

ext.jogl = '2.3.2'

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'
    
    compile "commons-io:commons-io:2.4"
    compile "java3d:vecmath:1.3.1"

    compile "org.jogamp.gluegen:gluegen-rt:$jogl"
    compile "org.jogamp.jogl:jogl-all:$jogl"

    compile "org.jogamp.gluegen:gluegen-rt:$jogl:natives-macosx-universal"
    compile "org.jogamp.jogl:jogl-all:$jogl:natives-macosx-universal"

    compile "org.jogamp.gluegen:gluegen-rt:$jogl:natives-windows-amd64"
    compile "org.jogamp.jogl:jogl-all:$jogl:natives-windows-amd64"
}

manifest {
    attributes 'Main-Class': "eu.mihosoft.vrl.v3d.nativeogl.Main"
}

task createNativeHeaders (dependsOn: compileJava){
    
    doFirst {
        println(">> Generating Headers:")
        String cmd = "javah -o native/include/vrlnativeoglbinding.h -classpath $sourceSets.main.output.classesDir eu.mihosoft.vrl.v3d.nativeogl.NativeOpenGL"
        
        println(cmd)
        
        def proc = cmd.execute(cmd.split(" "),new File(projectDir.toString()));

        proc.in.eachLine {line -> println line}
        proc.err.eachLine {line -> System.err.println( 'ERROR: ' + line)}
        proc.waitFor()
    }
}

task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = mainClass;
    // jvmArgs = ['-Dprism.forceGPU=true', '-Dprism.verbose=true', '-Dprism.order=es2,d3d,sw']
    // jvmArgs = ['-Dprism.forceGPU=true']
}




